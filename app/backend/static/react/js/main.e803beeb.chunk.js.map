{"version":3,"sources":["Grid.jsx","GridSquare.jsx","serviceWorker.js","App.jsx","index.jsx"],"names":["React","require","GridSquare","module","exports","props","gridsquares","data","split","map","square","square_arr","properties","className","parseInt","action","method","type","name","Boolean","window","location","hostname","match","Grid","useEffect","useState","socket","io","App","token","value","setValue","on","console","log","msg","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4HAAA,IAAMA,EAAQC,EAAQ,GAEhBC,GADYD,EAAQ,GACPA,EAAQ,KACfA,EAAQ,GAqBpBE,EAAOC,QAnBM,SAACC,GACZ,IAGMC,EAHMD,EAAME,KAAKC,MAAM,MAGHC,KAAI,SAACC,GAC3B,IAAIC,EAAaD,EAAOF,MAAM,KAC9B,OAAQ,gBAACN,EAAD,CAAYU,WAAYD,OAGpC,OACE,uBAAKE,UAAU,kBACZP,K,mBChBP,IAAMN,EAAQC,EAAQ,GACJA,EAAQ,GACdA,EAAQ,GAgBpBE,EAAOC,QAdY,SAACC,GAClB,OACE,uBAAKQ,UAAW,cAA+C,GAA/BC,SAAST,EAAMO,WAAW,IAAS,SAAU,aAC3E,wBAAMG,OAAQ,oBAAuBV,EAAMO,WAAW,GAAKI,OAAO,QAC/D,0BAAQC,KAAK,SAASC,KAAK,gBAAgBb,EAAMO,WAAW,Q,mGCIjDO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YClBAvB,EAAQC,EAAQ,GAEhBuB,EAAOvB,EAAQ,IACfwB,EAAYzB,EAAMyB,UAClBC,EAAW1B,EAAM0B,SAGjBC,GAFM1B,EAAQ,GACTA,EAAQ,GACJ2B,CAAG,0BA+BHC,EA7BH,SAACxB,GAAW,IAAD,EACKqB,EAASN,OAAOU,OADrB,mBACdC,EADc,KACPC,EADO,KAerB,OAZAL,EAAOM,GAAG,WAAW,WACjBC,QAAQC,IAAI,2BAGhBV,GAAU,WACRE,EAAOM,GAAG,WAAW,SAASG,GAC5BF,QAAQC,IAAI,WACZH,EAASI,EAAI7B,WAEd,CAACwB,IAIF,uBAAKlB,UAAU,OACb,0BAAQA,UAAU,cAChB,qCAEF,gBAACW,EAAD,CAAMjB,KAAMwB,MC1BZ/B,EAAQC,EAAQ,GAChBoC,EAAWpC,EAAQ,IACPA,EAAQ,GACRA,EAAQ,IAE1BoC,EAASC,OACP,gBAAC,EAAD,MACAC,SAASC,eAAe,SFyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLd,QAAQc,MAAMA,EAAMC,c","file":"js/main.e803beeb.chunk.js","sourcesContent":["const React = require('react');\nconst PropTypes = require('prop-types');\nconst GridSquare = require('./GridSquare');\nconst css = require('./App.css');\n\nconst Grid = (props) => { \n  let array = props.data.split(')(');\n  \n  \n  const gridsquares = array.map((square) => {\n      let square_arr = square.split(\",\");\n      return (<GridSquare properties={square_arr} />);\n  });\n\n  return (\n    <div className=\"grid-container\">\n      {gridsquares}\n    </div>\n  );\n}\n\nGrid.propTypes = {\n};\n\nmodule.exports = Grid;\n","const React = require('react');\nconst PropTypes = require('prop-types');\nconst css = require('./App.css');\n\nconst GridSquare = (props) => {\n  return (\n    <div className={'grid-item ' + (parseInt(props.properties[1])==1 ? \"active\": \"inactive\")}>\n      <form action={'/activetoggle?id=' + (props.properties[0])} method=\"post\">\n         <button type=\"submit\" name=\"submitButton\">{props.properties[0]}</button>\n       </form>\n    </div>\n  );\n}\n\nGridSquare.propTypes = {\n  \n};\n\nmodule.exports = GridSquare;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const React = require('react');\nconst PropTypes = require('prop-types');\nconst Grid = require('./Grid.jsx');\nconst useEffect = React.useEffect;\nconst useState = React.useState;\nconst css = require('./App.css');\nconst io = require('socket.io-client');\nconst socket = io(\"http://127.0.0.1:5000\");\n\nconst App = (props) => {\n  const [value, setValue] = useState(window.token);\n  \n  socket.on('connect', function() {\n      console.log('Websocket connected!');\n  });\n  \n  useEffect(() => {\n    socket.on('message', function(msg) {\n      console.log(\"arduino\");\n      setValue(msg.data);\n    });\n  }, [value]);\n\n  \n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>Welcome</p>\n      </header>\n      <Grid data={value}/>\n    </div>\n  );\n}\n\nApp.propTypes = {\n    token: PropTypes.string\n};\n\nexport default App;\n","import * as serviceWorker from './serviceWorker';\nimport App from './App';\n\nconst React = require('react');\nconst ReactDOM = require('react-dom');\nconst PropTypes = require('prop-types');\nconst css_index = require('./index.css');\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}