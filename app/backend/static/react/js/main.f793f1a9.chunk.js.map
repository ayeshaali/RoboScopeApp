{"version":3,"sources":["App.jsx","Grid.jsx","Module.jsx","GridSquare.jsx","ControlPanel.jsx","serviceWorker.js","index.jsx"],"names":["React","require","Grid","ControlPanel","default","useEffect","useState","socket","App","props","window","token","value","setValue","on","console","log","msg","data","className","Module","module","exports","array","split","mod_array","i","length","push","slice","modules","map","mod","properties","GridSquare","gridsquares","square","square_arr","componentToHex","c","hex","toString","r","g","b","active","parseInt","style","background","action","replace","method","type","name","MaterialPicker","options","label","modState","setModState","controlState","setControlState","colorState","setColorState","control_select","selected_mod","first_square","color","onChangeComplete","e","for","id","onChange","selectedOption","target","option","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"js/main.f793f1a9.chunk.js","sourcesContent":["const React = require('react');\nconst PropTypes = require('prop-types');\nconst Grid = require('./Grid.jsx');\nconst ControlPanel = require('./ControlPanel.jsx').default;\nconst useEffect = require('react')['useEffect'];\nconst useState = require('react')['useState'];\nconst css = require('./App.css');\nconst socket = require('socket.io-client')(\"http://127.0.0.1:5000\");\n\nconst App = (props) => {\n  // Websocket operations\n  // value holds a string of the grid square values \n  const [value, setValue] = useState(window.token);\n  \n  // connect to websocket\n  socket.on('connect', function() {\n      console.log('Websocket connected!');\n  });\n  \n  // changes to arduino causes changes in grid, changes are sent over websocket\n  // useEffect allows us to rerender app with new grid everytime new data is sent\n  useEffect(() => {\n    socket.on('message', function(msg) {\n      console.log(\"arduino\");\n      setValue(msg.data);\n    });\n  }, [value]);\n\n  \n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>Welcome</p>\n      </header>\n      <div className=\"app-container\">\n      <Grid data={value}/>\n      <ControlPanel data={value}/>\n      </div>\n    </div>\n  );\n}\n\nApp.propTypes = {\n    token: PropTypes.string\n};\n\nexport default App;\n","const React = require('react');\nconst PropTypes = require('prop-types');\nconst Module = require('./Module');\nconst css = require('./App.css');\nconst useState = React.useState;\n\n// main component on page: contains entire grid\nconst Grid = (props) => {\n  // parse through grid string (token)\n  // split into grid squares\n  let array = props.data.split(')(');\n  // split into modules\n  let mod_array = []\n  for (var i=0; i<array.length; i+=8) {\n    mod_array.push(array.slice(i,i+8));\n  }\n  \n  // create modules \n  const modules = mod_array.map((mod) => {\n      return (<Module properties={mod} />);\n  });\n\n  return (\n    <div className=\"grid-container\">\n      {modules}\n    </div>\n  );\n}\n\nGrid.propTypes = {\n};\n\nmodule.exports = Grid;\n","const React = require('react');\nconst PropTypes = require('prop-types');\nconst GridSquare = require('./GridSquare');\nconst css = require('./App.css');\n\n// creates module of 8 squares: directed to from Grid component\nconst Module = (props) => { \n  let array = props.properties;\n  \n  // create gridsquares using array of 8 squares\n  const gridsquares = array.map((square) => {\n      let square_arr = square.split(\",\");\n      return (<GridSquare properties={square_arr} />);\n  });\n\n  return (\n    <div className=\"module-container\">\n      {gridsquares}\n    </div>\n  );\n}\n\nModule.propTypes = {\n};\n\nmodule.exports = Module;\n","const React = require('react');\nconst PropTypes = require('prop-types');\nconst css = require('./App.css');\n\n// turn RGB colors into hex value\nconst componentToHex= (c)=> {\n  var hex = c.toString(16);\n  return hex.length == 1 ? \"0\" + hex : hex;\n}\n\nconst rgbToHex = (r, g, b)=> {\n  return \"#\" + componentToHex(r) + componentToHex(g) + componentToHex(b);\n}\n\nconst GridSquare = (props) => {\n  // determines active status (two classes in App.css: .active or .inactive)\n  let active = parseInt(props.properties[2])==1 ? \"active\": \"inactive\";\n  // set hex value for the background color of the grid GridSquare\n  //    if active use color, if inactive use default inactive color\n  let hex=null;\n  if (active==\"active\") {\n    hex = rgbToHex(parseInt(props.properties[3]),parseInt(props.properties[4]),parseInt(props.properties[5]));\n    console.log(hex);\n  }\n  return (\n    <div className={'grid-item ' + active} style={{background: hex}}>\n      <form action={'/activetoggle?id=' + (props.properties[0].replace(\"(\",\"\"))} method=\"post\">\n         <button type=\"submit\" name=\"submitButton\">{props.properties[0].replace(\"(\", \"\")}</button>\n       </form>\n    </div>\n  );\n}\n\nGridSquare.propTypes = {\n  \n};\n\nmodule.exports = GridSquare;\n","const React = require('react');\nconst PropTypes = require('prop-types');\nconst MaterialPicker = require('react-color')['MaterialPicker'];\nconst css = require('./App.css');\nconst useState= require('react')['useState'];\n\n// modules\nconst options = [\n  { value: '0', label: ' ' },\n  { value: '1', label: 'Module 1' },\n  { value: '2', label: 'Module 2' },\n  { value: '3', label: 'Module 3' },\n  { value: '4', label: 'Module 4' },\n  { value: '5', label: 'Module 5' },\n  { value: '6', label: 'Module 6' },\n  { value: '7', label: 'Module 7' },\n  { value: '8', label: 'Module 8' },\n  { value: '9', label: 'Module 9' },\n  { value: '10', label: 'Module 10' },\n  { value: '11', label: 'Module 11' },\n  { value: '12', label: 'Module 12' }\n];\n\nconst ControlPanel = (props) => { \n  // parse token (grid string) in the same way as in Grid component\n  let array = props.data.split(')(');\n  let mod_array = []\n  for (var i=0; i<array.length; i+=8) {\n    mod_array.push(array.slice(i,i+8));\n  }\n  \n  // states for forms:  \n  let [modState, setModState] = useState('0'); //which module selected\n  let [controlState, setControlState] = useState(false); //if module selected controlState is true\n  let [colorState, setColorState] = useState('#2196F3'); //if controlState true, colorState allows to determine which color has been selected\n  \n  // handle change to module select\n  const handleChange = (selectedOption) => {\n    setModState(selectedOption); //sets modState to new module value\n    if (selectedOption!=null) {\n      setControlState(true); //sets controlState to true\n    }\n  };\n\n  let control_select = null\n  if (controlState==true) { //will show control options for module\n    //get module values and first square that is active\n    let selected_mod = mod_array[modState-1]; \n    let first_square = null;\n    for (var i =0; i <selected_mod.length; i++) {\n      first_square = selected_mod[0].split(\",\");\n      if (first_square[1]==1) {\n        break;\n      }\n    }\n    \n    // all control options: MaterialPicker (color selector), active/inactive toggles, height\n    control_select = (\n      <div className=\"module-control\">\n        <MaterialPicker color={ colorState }\n          onChangeComplete={e=> setColorState(e.hex) }/>\n        <form action={'/module?id='+(modState)+'&color='+((colorState).toString().slice(1))} method=\"post\">\n          <button type=\"submit\" name=\"submitButton\">Submit</button>\n        </form>\n        \n        <form action={'/activemodule?id='+(modState)} method=\"post\">\n          <button type=\"submit\" name=\"submitButton\">Toggle Active</button>\n        </form>\n        \n        <form action={'/inactivemodule?id='+(modState)} method=\"post\">\n          <button type=\"submit\" name=\"submitButton\">Toggle Inactive</button>\n        </form>\n        \n        <form action={'/inactivemodule?id='+(modState)} method=\"post\">\n          <label for=\"height\">Height</label>\n          <input type=\"text\" id=\"height\" name=\"height\" value = {first_square[5]}/>\n        </form>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"control-panel\">\n      <h1> Controls </h1>\n      <select id=\"lang\" onChange={e=> handleChange(e.target.value)} value={modState}>\n        {options.map((option)=> {\n          return <option value={option.value}>{option.label}</option>\n        })}\n      </select>\n      {control_select}\n    </div>\n    \n  );\n};\n\nControlPanel.propTypes = {\n};\n\nexport default ControlPanel;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as serviceWorker from './serviceWorker';\nconst App = require('./App.jsx').default;\nconst React = require('react');\nconst ReactDOM = require('react-dom');\nconst PropTypes = require('prop-types');\nconst css_index = require('./index.css');\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}