{"version":3,"sources":["App.jsx","Grid.jsx","Module.jsx","GridSquare.jsx","ControlPanel.jsx","serviceWorker.js","index.jsx"],"names":["React","require","Grid","ControlPanel","useEffect","useState","socket","App","props","window","token","value","setValue","on","console","log","msg","data","className","Module","module","exports","array","split","mod_array","i","length","push","slice","modules","map","mod","properties","GridSquare","gridsquares","square","square_arr","parseInt","action","method","type","name","Boolean","location","hostname","match","default","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2JAAMA,EAAQC,EAAQ,GAEhBC,EAAOD,EAAQ,IACfE,EAAeF,EAAQ,IACvBG,EAAYH,EAAQ,GAAR,UACZI,EAAWJ,EAAQ,GAAR,SAEXK,GADML,EAAQ,GACLA,EAAQ,GAARA,CAA4B,0BAgC5BM,UA9BH,SAACC,GAAW,IAAD,EACKH,EAASI,OAAOC,OADrB,mBACdC,EADc,KACPC,EADO,KAerB,OAZAN,EAAOO,GAAG,WAAW,WACjBC,QAAQC,IAAI,2BAGhBX,GAAU,WACRE,EAAOO,GAAG,WAAW,SAASG,GAC5BF,QAAQC,IAAI,WACZH,EAASI,EAAIC,WAEd,CAACN,IAIF,uBAAKO,UAAU,OACb,0BAAQA,UAAU,cAChB,qCAEF,gBAAChB,EAAD,CAAMe,KAAMN,IACZ,gBAACR,EAAD,S,mBC9BN,IAAMH,EAAQC,EAAQ,GAEhBkB,GADYlB,EAAQ,GACXA,EAAQ,KACXA,EAAQ,GACHD,EAAMK,SAwBvBe,EAAOC,QArBM,SAACb,GAGZ,IAFA,IAAIc,EAAQd,EAAMS,KAAKM,MAAM,MACzBC,EAAY,GACPC,EAAE,EAAGA,EAAEH,EAAMI,OAAQD,GAAG,EAC/BD,EAAUG,KAAKL,EAAMM,MAAMH,EAAEA,EAAE,IAGjC,IAAMI,EAAUL,EAAUM,KAAI,SAACC,GAC3B,OAAQ,gBAACZ,EAAD,CAAQa,WAAYD,OAGhC,OACE,uBAAKb,UAAU,kBACZW,K,uCCpBP,IAAM7B,EAAQC,EAAQ,GAEhBgC,GADYhC,EAAQ,GACPA,EAAQ,KACfA,EAAQ,GAoBpBmB,EAAOC,QAlBQ,SAACb,GACd,IAEM0B,EAFM1B,EAAMwB,WAEQF,KAAI,SAACK,GAC3B,IAAIC,EAAaD,EAAOZ,MAAM,KAC9B,OAAQ,gBAACU,EAAD,CAAYD,WAAYI,OAGpC,OACE,uBAAKlB,UAAU,oBACZgB,K,mBCfP,IAAMlC,EAAQC,EAAQ,GACJA,EAAQ,GACdA,EAAQ,GAgBpBmB,EAAOC,QAdY,SAACb,GAClB,OACE,uBAAKU,UAAW,cAA+C,GAA/BmB,SAAS7B,EAAMwB,WAAW,IAAS,SAAU,aAC3E,wBAAMM,OAAQ,oBAAuB9B,EAAMwB,WAAW,GAAKO,OAAO,QAC/D,0BAAQC,KAAK,SAASC,KAAK,gBAAgBjC,EAAMwB,WAAW,Q,8DCR/DhC,EAAQC,EAAQ,GAIhBI,GAHSJ,EAAQ,IACLA,EAAQ,GACdA,EAAQ,GACJA,EAAQ,GAAR,UA8BhBmB,EAAOC,QAbc,SAACb,GAAW,IAAD,EACNH,EAAS,YADH,6BAG9B,OACE,uBAAKa,UAAU,oB,oGCbCwB,QACW,cAA7BjC,OAAOkC,SAASC,UAEe,UAA7BnC,OAAOkC,SAASC,UAEhBnC,OAAOkC,SAASC,SAASC,MACvB,2DCjBN,IAAMtC,EAAMN,EAAQ,IAAa6C,QAC3B9C,EAAQC,EAAQ,GAChB8C,EAAW9C,EAAQ,GACPA,EAAQ,GACRA,EAAQ,IAE1B8C,EAASC,OACP,gBAACzC,EAAD,MACA0C,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5C,QAAQ4C,MAAMA,EAAMC,c","file":"js/main.845c1086.chunk.js","sourcesContent":["const React = require('react');\nconst PropTypes = require('prop-types');\nconst Grid = require('./Grid.jsx');\nconst ControlPanel = require('./ControlPanel.jsx')\nconst useEffect = require('react')['useEffect'];\nconst useState = require('react')['useState'];\nconst css = require('./App.css');\nconst socket = require('socket.io-client')(\"http://127.0.0.1:5000\");\n\nconst App = (props) => {\n  const [value, setValue] = useState(window.token);\n  \n  socket.on('connect', function() {\n      console.log('Websocket connected!');\n  });\n  \n  useEffect(() => {\n    socket.on('message', function(msg) {\n      console.log(\"arduino\");\n      setValue(msg.data);\n    });\n  }, [value]);\n\n  \n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>Welcome</p>\n      </header>\n      <Grid data={value}/>\n      <ControlPanel/>\n    </div>\n  );\n}\n\nApp.propTypes = {\n    token: PropTypes.string\n};\n\nexport default App;\n","const React = require('react');\nconst PropTypes = require('prop-types');\nconst Module = require('./Module');\nconst css = require('./App.css');\nconst useState = React.useState;\n\n\nconst Grid = (props) => { \n  let array = props.data.split(')(');\n  let mod_array = []\n  for (var i=0; i<array.length; i+=8) {\n    mod_array.push(array.slice(i,i+8));\n  }\n  \n  const modules = mod_array.map((mod) => {\n      return (<Module properties={mod} />);\n  });\n\n  return (\n    <div className=\"grid-container\">\n      {modules}\n    </div>\n  );\n}\n\nGrid.propTypes = {\n};\n\nmodule.exports = Grid;\n","const React = require('react');\nconst PropTypes = require('prop-types');\nconst GridSquare = require('./GridSquare');\nconst css = require('./App.css');\n\nconst Module = (props) => { \n  let array = props.properties;\n  \n  const gridsquares = array.map((square) => {\n      let square_arr = square.split(\",\");\n      return (<GridSquare properties={square_arr} />);\n  });\n\n  return (\n    <div className=\"module-container\">\n      {gridsquares}\n    </div>\n  );\n}\n\nModule.propTypes = {\n};\n\nmodule.exports = Module;\n","const React = require('react');\nconst PropTypes = require('prop-types');\nconst css = require('./App.css');\n\nconst GridSquare = (props) => {\n  return (\n    <div className={'grid-item ' + (parseInt(props.properties[1])==1 ? \"active\": \"inactive\")}>\n      <form action={'/activetoggle?id=' + (props.properties[0])} method=\"post\">\n         <button type=\"submit\" name=\"submitButton\">{props.properties[0]}</button>\n       </form>\n    </div>\n  );\n}\n\nGridSquare.propTypes = {\n  \n};\n\nmodule.exports = GridSquare;\n","const React = require('react');\nconst Select = require('react-select');\nconst PropTypes = require('prop-types');\nconst css = require('./App.css');\nconst useState= require('react')['useState'];\n\nconst options = [\n  { value: '1', label: 'Module 1' },\n  { value: '2', label: 'Module 2' },\n  { value: '3', label: 'Module 3' },\n  { value: '4', label: 'Module 4' },\n  { value: '5', label: 'Module 5' },\n  { value: '6', label: 'Module 6' },\n  { value: '7', label: 'Module 7' },\n  { value: '8', label: 'Module 8' },\n  { value: '9', label: 'Module 9' },\n  { value: '10', label: 'Module 10' },\n  { value: '11', label: 'Module 11' },\n  { value: '12', label: 'Module 12' }\n];\n\nconst ControlPanel = (props) => { \n  let [state, setState] = useState(\"Module 1\");\n\n  return (\n    <div className=\"control-panel\">\n    \n    </div>\n  );\n};\n\nControlPanel.propTypes = {\n};\n\nmodule.exports= ControlPanel;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as serviceWorker from './serviceWorker';\nconst App = require('./App.jsx').default;\nconst React = require('react');\nconst ReactDOM = require('react-dom');\nconst PropTypes = require('prop-types');\nconst css_index = require('./index.css');\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}